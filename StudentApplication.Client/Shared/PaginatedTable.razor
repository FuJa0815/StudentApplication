@using StudentApplication.Common.Utils
@using System.Reflection
@using System.ComponentModel
@using System.ComponentModel.DataAnnotations
@using StudentApplication.Client.HttpRepository
@using StudentApplication.Common.Attributes
@typeparam T where T : class, IModel<TKey>
@typeparam TKey where TKey : IEquatable<TKey>
@inject RestData<T, TKey> Data
<MyMudTable T="T" TKey="TKey" RowsPerPage="@Data.PageLength"
            RowsPerPageChanged="async i => await Data.SetPageLengthAsync(i)"
            Bordered="true"
            MultiSelection="true"
            @bind-SelectedItems="_selectedItems"
            SortLabel="Sort By"
            CommitEditTooltip="Commit Edit"
            RowEditPreview="BackupItem"
            RowEditCancel="ResetItemToOriginalValues"
            RowEditCommit="Commit"
            AllowUnsorted="false"
            TotalItems="@Data.Count"
            Items="@Data"
            Hover="true"
            @bind-CurrentPage="@Data.Page"
            Breakpoint="Breakpoint.Sm">
    <ColGroup>
        @ColGroup
        <col/>
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h6">@Title</MudText>
        <MudSpacer/>
        <MudTextField T="string" OnDebounceIntervalElapsed="async str => await Data.SetQueryAsync(str)" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Search" IconSize="Size.Medium" DebounceInterval="300"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        @foreach (var property in Properties)
        {
            <MudTh><MudTableSortLabel SortDirectionChanged="async direction => await SetOrderingAsync(property.Name, direction)" Enabled="@IsPropertySortable(property)" T="T">@GetPropertyName(property)</MudTableSortLabel></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (var property in Properties)
        {
            <MudTd DataLabel="@GetPropertyName(property)">@property.GetValue(context)?.ToString()</MudTd>
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="@(Title + " per page")"/>
    </PagerContent>
    <FooterContent>
        <MudTd colspan="@Properties.Count()">Select All</MudTd>
    </FooterContent>
    <RowEditingTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        @Edit(context)
    </RowEditingTemplate>
</MyMudTable>
<MudIconButton Icon="@Icons.Filled.Delete" Disabled="_selectedItems.Count == 0" OnClick="Delete"/>
@if (_newItem == null)
{
    <MudIconButton Icon="@Icons.Filled.Add" OnClick="ShowNewForm"/>
}
else
{
    <MudForm @bind-IsValid="_newItemValid">
        @Edit(_newItem)
    </MudForm>
    
    <MudIconButton Icon="@Icons.Filled.Check" Disabled="!_newItemValid" OnClick="AddNewItemAsync"/>
}


@code {
    private T? _itemBeforeEdit = null;
    
    [Parameter]
    public string Title { get; set; } = string.Empty;
    
    [Parameter]
    public RenderFragment? ColGroup { get; set; }
    
    [Parameter]
    public RenderFragment<T> Edit { get; set; }

    private T? _newItem;
    private bool _newItemValid;

    private HashSet<T> _selectedItems = new();
    
    private void ShowNewForm()
    {
        _newItem = (T)Activator.CreateInstance(typeof(T))!;
    }

    private async Task AddNewItemAsync()
    {
        await Data.Add(_newItem);
        _newItem = null;
    }

    private async Task Delete()
    {
        foreach (var item in _selectedItems)
        {
            await Data.Remove(item.Id);
        }
        _selectedItems.Clear();
    }

    IEnumerable<PropertyInfo> Properties => typeof(T).GetProperties(BindingFlags.Instance | BindingFlags.Public)
        .Where(p => !p.PropertyType.IsGenericType || typeof(IEnumerable<>).IsAssignableFrom(p.PropertyType.GetGenericTypeDefinition()));

    private string GetPropertyName(PropertyInfo prop) => prop.GetCustomAttribute<DisplayNameAttribute>()?.DisplayName ?? prop.Name;
    private bool IsPropertySortable(PropertyInfo prop) => prop.GetCustomAttribute<RestSortableAttribute>() != null;

    async Task SetOrderingAsync(string orderBy, SortDirection direction)
    {
        if (direction == SortDirection.None)
            return;
        await Data.SetSortAsync(orderBy, direction == SortDirection.Ascending);
    }

    private void BackupItem(object item)
    {
        // Deep Clone
        _itemBeforeEdit = (T)item.Copy()!;
    }

    private async void Commit(object item)
    {
        if (await Data.Update((T)item)) return;
        ResetItemToOriginalValues(item);
        StateHasChanged();
    }

    private void ResetItemToOriginalValues(object item)
    {
        foreach (var prop in Properties)
        {
            if (prop.Name == "Id") continue;
            prop.SetValue(item, prop.GetValue(_itemBeforeEdit));
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Data.CollectionChanged += (s, e) =>
            {
                StateHasChanged();
            };
            await Data.InitAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}