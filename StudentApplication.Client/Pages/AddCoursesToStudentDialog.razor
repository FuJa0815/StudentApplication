@using StudentApplication.Common.Models
@using StudentApplication.Common.Utils
@inject HttpClient Http
<MudDialog>
    <DialogContent>
        <PaginatedTable T="Course" TKey="int" Title="Courses" ReadOnly="true" SelectedItems="@SelectedCourses" SelectedItemsChanged="OnSelectedCoursesChanged"/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudBadge Color="Color.Primary" OnClick="AddCoursesToStudent">Add</MudBadge>
    </DialogActions>
</MudDialog>

@code {
    /// <summary>
    ///   The student to apply courses to
    /// </summary>
    [Parameter]
    public Student Student { get; set; } = new();

    [Parameter]
    public HashSet<Course>? SelectedCourses { get; set; }

    private async Task OnSelectedCoursesChanged(HashSet<Course> values)
    {
        SelectedCourses = values;
        await SelectedCoursesChanged.InvokeAsync(values);
        StateHasChanged();
    }
    
    [Parameter]
    public EventCallback<HashSet<Course>> SelectedCoursesChanged { get; set; }
    
    /// <summary>
    ///   The original selected courses are kept for comparison upon sending
    /// </summary>
    private HashSet<Course>? OriginalSelectedCourses { get; set; }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; } = null!;

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var response = await Http.GetAsync("students/" + Student.Id);
            var obj = await JsonUtils.ReadResultAsync<Student>(response);
            OriginalSelectedCourses = obj.Courses;
            await OnSelectedCoursesChanged(new HashSet<Course>(OriginalSelectedCourses));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task AddCoursesToStudent()
    {
        if (OriginalSelectedCourses == null) return;
        if (SelectedCourses == null) return;
        foreach (var course in OriginalSelectedCourses.Where(course => !SelectedCourses.Contains(course)))
        {
            await Http.DeleteAsync($"courses/{course.Id}/students/{Student.Id}");
        }
        foreach (var course in SelectedCourses.Where(course  => !OriginalSelectedCourses.Contains(course)))
        {
            await Http.PostAsync($"courses/{course.Id}/students/{Student.Id}", null);
        }
        MudDialog.Close(DialogResult.Ok(true));
        OriginalSelectedCourses = new HashSet<Course>(SelectedCourses);
    }
}